import tensorflow as tf

def SpatialPyramidPooling(previous_conv, num_sample, previous_conv_size, out_pool_size):
    spp = []
    for i in range(len(out_pool_size)):
        h_wid = tf.math.ceil(previous_conv_size[0] / out_pool_size[i])
        w_wid = tf.math.ceil(previous_conv_size[1] / out_pool_size[i])
        h_pad = (h_wid*out_pool_size[i] - previous_conv_size[0] + 1) // 2
        w_pad = (w_wid*out_pool_size[i] - previous_conv_size[1] + 1) // 2
        
        maxpool = tf.keras.layers.MaxPooling2D(
            pool_size=(int(h_wid), int(w_wid)),
            strides=(int(h_wid), int(w_wid)),
            padding='valid'
        )
        x = maxpool(previous_conv)
        
        if i == 0:
            spp = tf.reshape(x, (num_sample, -1))
        else:
            spp = tf.concat([spp, tf.reshape(x, (num_sample, -1))], axis=1)

    return spp
